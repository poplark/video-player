{
  "compilerOptions": {
    /* Basic Options */
    // "incremental": true,                   /* 增置编译 */
    "target": "ES2015",                       /* 目标语言的版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */
    "module": "es2015",                       /* 生成代码的模块标准: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */
    // "lib": [],                             /* TS 需要引用的库，即声明文件，es5 默认"dom" */
    // "allowJs": true,                       /* 允许编译：IS 文件（js、jsx) */
    // "checkJs": true,                       /* 允许在JS文件中报错，通常与allowJS _起使用 */
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    "declaration": true,                      /* 生成声明文件 */
    // "declarationMap": true,                /* 生成声明文件的 sourceMap */
    // "sourceMap": true,                     /* 生成目标文件的 sourceMap */
    // "outFile": "./",                       /* 将多个相互依赖的文件生成一个文件，可以用在AMD模块中 */
    "outDir": "./lib",                        /* 指定输出目录 */
    // "rootDir": "./",                       /* 指定输入文件目录（用于输出） --outDir. */
    // "composite": true,                     /* Enable project compilation */
    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
    "removeComments": true,                   /* 删除注释 */
    // "noEmit": true,                        /* 不输出文件 */
    // "importHelpers": true,                 /* 通过 tslib 引入 helper 函数，文件必须是模块 */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    "strict": true,                           /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                 /* 不允许隐式的any类型 */
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* 严格的 bind/call/apply 检査 */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* 不允许 this 有隐式的 any 类型 */
    // "alwaysStrict": true,                  /* 在代码中注入"use strict"; */

    /* Additional Checks */
    "noUnusedLocals": true,                   /* 检査只声明，未使用的局部变置  */
    "noUnusedParameters": true,               /* Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* 每个分支都要有返回值 */
    // "noFallthroughCasesInSwitch": true,    /* 防止switch语句贯穿 */

    /* Module Resolution Options */
    "moduleResolution": "classic",            /* 模块解析策略: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* 解析非相对模块的基地址 */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* 将多个目录放在一个虚拟目录下，用于运行时 */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* 声明文件包 */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* 生成目标文件的 inline sourceMap */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    "experimentalDecorators": true,           /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */

    /* Advanced Options */
    "forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */
  },
  "include": [
    "src/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "lib"
  ]
}
